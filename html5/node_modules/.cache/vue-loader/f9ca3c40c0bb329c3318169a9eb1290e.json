{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/currentAlarmStatus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/currentAlarmStatus.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Mixins from '@/mixins'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      minWidth: 100,\n      action: '',\n      options: [\n        {\n          val: 'act_en',\n          label: 'Active enabled alarms'\n        },\n        {\n          val: 'act_unack',\n          label: 'Active Unack alarms'\n        },\n        {\n          val: 'act_all',\n          label: 'Active all alarms'\n        },\n        {\n          val: 'all_alm',\n          label: 'All alarms'\n        },\n        {\n          val: 'all_en',\n          label: 'All enabled alarms'\n        },\n        {\n          val: 'all_dis',\n          label: 'All disabled alarms'\n        }\n      ]\n    }\n  },\n  computed: {\n    grow () {\n      return this.$store.state.Status.status.grow || []\n    },\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50\n    },\n    actn () {\n      let res = 'acknowledge'\n      res = this.action === 'all_en' ? 'disable' : res\n      res = this.action === 'all_dis' ? 'enable' : res\n      return res\n    }\n  },\n  methods: {\n    handleClick (row) {\n      if (this.action === 'all_alm') return\n      this.$ws().send({\n        func: 80,\n        alid: row.alid,\n        actn: this.actn\n      })\n    },\n    handleChange (e) {\n      this.$ws().send({\n        func: 79,\n        actn: this.action\n      })\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  }\n}\n",{"version":3,"sources":["currentAlarmStatus.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"currentAlarmStatus.vue","sourceRoot":"src/pages/menus/Status","sourcesContent":["<template>\n  <Container type=\"card-full\"\n             :scorll='false'>\n    <div class=\"dd-mb\">\n      <span class=\"dd-title\">Current Alarm</span>\n      <el-select v-model=\"action\"\n                 @change=\"handleChange\"\n                 class=\"dd-ml\">\n        <el-option v-for=\"item in options\"\n                   :key=\"item.val\"\n                   :label=\"item.label\"\n                   :value=\"item.val\">\n        </el-option>\n      </el-select>\n    </div>\n    <el-table :data='grow'\n              border\n              :height='tableHeight'\n              style=\"width: 100%\">\n      <el-table-column min-width=\"130\"\n                       prop=\"atim\"\n                       label=\"Time\">\n        <template slot-scope=\"scope\">\n          {{format(scope.row.atim||'')}}\n        </template>\n      </el-table-column>\n      <el-table-column min-width=\"60\"\n                       prop=\"acat\"\n                       label=\"Categ\" />\n      <el-table-column prop=\"astt\"\n                       label=\"State\"\n                       min-width=\"50\" />\n      <el-table-column prop=\"amod\"\n                       label=\"Remark\"\n                       min-width=\"50\" />\n      <el-table-column min-width=\"100\"\n                       prop=\"comt\"\n                       label=\"Comment\">\n      </el-table-column>\n      <el-table-column min-width=\"100\"\n                       label=\"\">\n        <template slot-scope=\"scope\">\n          <el-button type='text'\n                     @click=\"handleClick(scope.row)\">\n            <!-- acknowledge or enable or disable -->\n            {{actn}}\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n  </Container>\n</template>\n\n<script>\nimport Mixins from '@/mixins'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      minWidth: 100,\n      action: '',\n      options: [\n        {\n          val: 'act_en',\n          label: 'Active enabled alarms'\n        },\n        {\n          val: 'act_unack',\n          label: 'Active Unack alarms'\n        },\n        {\n          val: 'act_all',\n          label: 'Active all alarms'\n        },\n        {\n          val: 'all_alm',\n          label: 'All alarms'\n        },\n        {\n          val: 'all_en',\n          label: 'All enabled alarms'\n        },\n        {\n          val: 'all_dis',\n          label: 'All disabled alarms'\n        }\n      ]\n    }\n  },\n  computed: {\n    grow () {\n      return this.$store.state.Status.status.grow || []\n    },\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50\n    },\n    actn () {\n      let res = 'acknowledge'\n      res = this.action === 'all_en' ? 'disable' : res\n      res = this.action === 'all_dis' ? 'enable' : res\n      return res\n    }\n  },\n  methods: {\n    handleClick (row) {\n      if (this.action === 'all_alm') return\n      this.$ws().send({\n        func: 80,\n        alid: row.alid,\n        actn: this.actn\n      })\n    },\n    handleChange (e) {\n      this.$ws().send({\n        func: 79,\n        actn: this.action\n      })\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n</style>\n"]}]}