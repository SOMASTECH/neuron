{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Configuration/edit.vue?vue&type=style&index=0&id=7ac78b12&scoped=true&lang=scss&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Configuration/edit.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/css-loader/index.js","mtime":1578022550180},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1578022550923},{"path":"/home/neuron/build/html5/node_modules/postcss-loader/src/index.js","mtime":1578022550766},{"path":"/home/neuron/build/html5/node_modules/sass-loader/dist/cjs.js","mtime":1578022582167},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/deep/.el-input-number {\n  width: 100%;\n  &.is-without-controls .el-input__inner {\n    text-align: left;\n  }\n}\n.addrs {\n  border-bottom: 1px solid #ebeef5;\n  padding: 5px;\n  &:last-child {\n    border: none;\n  }\n}\n",{"version":3,"sources":["edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"edit.vue","sourceRoot":"src/pages/menus/Configuration","sourcesContent":["<template>\n  <Container type=\"card-full\"\n             :scorll='false'>\n    <div class=\"row flex\">\n      <div class=\"dd-title\">Attribute</div>\n      <div>\n        <el-button @click='$router.go(-1)'>Back</el-button>\n        <el-button @click='dialogTableVisible=true'\n                   type=\"primary\">Create</el-button>\n        <el-button @click='handleDelete'\n                   type=\"danger\">Delete</el-button>\n        <el-button @click='handleDummy'>Dummy</el-button>\n        <el-button @click='handleSubmit'\n                   type=\"primary\"\n                   :disabled=\"!canSubmit\">Submit</el-button>\n      </div>\n    </div>\n    <div>\n      <AttrbuteTable v-model=\"multipleSelection\"\n                     :attributeList='attributeList'\n                     :showBtn='true'\n                     :objectName='objn'\n                     @add='addAddress' />\n    </div>\n    <el-dialog title=\"Data Attribute Setup\"\n               :visible.sync=\"dialogTableVisible\"\n               @closed='close'>\n      <el-form ref='AttributeSetupFrom'\n               :model=\"AttributeSetupFrom\"\n               :rules=\"AttributeSetupFromRules\"\n               label-width=\"120px\">\n        <el-form-item label=\"Attribute name\"\n                      prop=\"attn\">\n          <el-input v-model=\"AttributeSetupFrom.attn\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"Attribute type\"\n                      prop=\"attn\">\n          <el-select v-model=\"AttributeSetupFrom.attt\">\n            <el-option v-for=\"item in AttributeTypeList\"\n                       :key=\"item.val\"\n                       :label=\"item.val\"\n                       :value=\"item.val\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"Decimal\"\n                      v-if=\"showDecimal\"\n                      prop=\"deci\">\n          <el-input-number v-model=\"AttributeSetupFrom.deci\"\n                           :controls='false'\n                           :precision='0'\n                           :min=\"0\" />\n        </el-form-item>\n        <el-form-item label=\"Visible\"\n                      prop=\"adis\">\n          <el-radio-group v-model=\"AttributeSetupFrom.adis\">\n            <el-radio :label=\"1\">Yes</el-radio>\n            <el-radio :label=\"0\">No</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"Change\"\n                      prop=\"achg\">\n          <el-radio-group v-model=\"AttributeSetupFrom.achg\">\n            <el-radio :label=\"1\">Yes</el-radio>\n            <el-radio :label=\"0\">No</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"Direction\"\n                      prop=\"attr\">\n          <el-radio-group v-model=\"AttributeSetupFrom.attr\">\n            <el-radio label=\"R\">R</el-radio>\n            <el-radio label=\"W\">W</el-radio>\n            <el-radio label=\"RW\">RW</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"Read time\"\n                      prop=\"rtim\"\n                      v-if=\"showReadTime\">\n          <el-input-number v-model=\"AttributeSetupFrom.rtim\"\n                           :controls='false'\n                           :precision='0'\n                           :min=\"0\" />\n        </el-form-item>\n      </el-form>\n      <el-button @click='submitAttributeSetupFrom'>submit</el-button>\n    </el-dialog>\n    <el-dialog title=\"Data Address Setup\"\n               @closed='addressClosed'\n               :visible.sync=\"addressVisible\">\n      <el-table :data='preAndSuff'\n                class=\"dd-mb\"\n                border>\n        <el-table-column label=\"Index\"\n                         :width=\"minWidth\">\n          <template slot-scope=\"scope\">\n            {{scope.row.obix+1}}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"pref\"\n                         :width=\"minWidth\"\n                         label=\"Prefix\" />\n        <el-table-column label=\"Suffix\"\n                         :width=\"minWidth\"\n                         prop=\"suff\" />\n        <el-table-column label=\"Address\">\n          <template slot-scope=\"scope\">\n            <el-input v-model=\"scope.row.addr\"></el-input>\n          </template>\n        </el-table-column>\n      </el-table>\n      <el-button @click='addressSubmit'\n                 type=\"primary\">submit</el-button>\n    </el-dialog>\n  </Container>\n</template>\n\n<script>\nimport { clone } from '@/utils/index'\nimport { AttributeTypeList } from '@/config/index'\nimport AttrbuteTable from './components/attrbuteTable'\nimport { mapState, mapMutations } from 'vuex'\nexport default {\n  data () {\n    return {\n      minWidth: 80,\n      objn: '',\n      preAndSuff: [],\n      dialogTableVisible: false,\n      attributeList: [],\n      AttributeSetupFrom: {},\n      AttributeSetupFromRules: {\n        attn: [\n          { required: true, message: 'pleace input Name', trigger: 'blur' },\n          { max: 30, message: 'max 30', trigger: 'blur' }\n        ],\n        attt: [\n          { required: true, message: 'pleace select Type', trigger: 'blur' }\n        ],\n        deci: [\n          { required: true, message: 'pleace input Decimal', trigger: 'blur' }\n        ],\n        adis: [\n          { required: true, message: 'pleace select Display', trigger: 'blur' }\n        ],\n        achg: [\n          { required: true, message: 'pleace select Change', trigger: 'blur' }\n        ],\n        attr: [\n          { required: true, message: 'pleace select Direction', trigger: 'blur' }\n        ],\n        rtim: [\n          { required: true, message: 'pleact input Time', trigger: 'blur' }\n        ]\n      },\n      AttributeTypeList: AttributeTypeList,\n      addressVisible: false,\n      activeAttributeRow: {},\n      multipleSelection: []\n    }\n  },\n  methods: {\n    close () {\n\n    },\n    addressClosed () {\n      this.preAndSuff.addr = ''\n    },\n    getFullName (pref, suff) {\n      pref = pref ? pref + '_' : ''\n      suff = suff ? '_' + suff : ''\n      return pref + this.objn + suff\n    },\n    submitAttributeSetupFrom () {\n      this.$refs.AttributeSetupFrom.validate((valid) => {\n        if (valid) {\n          this.attributeList.push({\n            ...this.AttributeSetupFrom,\n            aadd: clone(this.preAndSuff)\n          })\n          this.dialogTableVisible = false\n          this.AttributeSetupFrom = {}\n        } else {\n          console.log('error submit!!')\n          return false\n        }\n      })\n    },\n    handleSubmit () {\n      this.setObjectAttribute({ name: this.objn, attributeList: this.attributeList })\n      this.$router.push({\n        name: 'Configuration-objectSetup'\n      })\n    },\n    addAddress (row) {\n      this.activeAttributeRow = row\n      if (row.aadd.length) {\n        this.preAndSuff = clone(row.aadd)\n      }\n      this.addressVisible = true\n    },\n    addressSubmit () {\n      this.addressVisible = false\n      this.$set(this.activeAttributeRow, 'aadd', clone(this.preAndSuff))\n      this.resetPreAndSuff()\n    },\n    resetPreAndSuff () {\n      this.preAndSuff = this.preAndSuff.map(i => {\n        i.addr = ''\n        return i\n      })\n    },\n    handleDelete () {\n      if (!this.multipleSelection.length) return\n      this.$confirm('Are you sure delete these attribute?', 'delete attribute', {\n        type: 'warning'\n      }).then(() => {\n        const deleteList = this.multipleSelection.map(i => i.attn)\n        this.attributeList = this.attributeList.filter(i => !deleteList.includes(i.attn))\n        this.setObjectAttribute({ name: this.objn, attributeList: this.attributeList })\n      }).catch(() => {\n      })\n    },\n    handleDummy () {\n      if (!this.multipleSelection.length) return\n      this.multipleSelection.forEach(i => {\n        i.attr = '-'\n        i.rtim = 0\n        i.aadd.forEach(j => {\n          j.addr = '-'\n          return j\n        })\n      })\n    },\n    init () {\n      let name = this.$route.params.data\n      console.log(name)\n      if (name) {\n        this.objn = name\n        this.objectData.some(i => {\n          if (i.objn === name) {\n            if (i.preAndSuff) {\n              this.preAndSuff = [...i.preAndSuff]\n            } else {\n              this.preAndSuff = i.oatt[0].aadd.map(i => ({\n                pref: i.pref,\n                obix: i.obix,\n                suff: i.suff,\n                addr: ''\n              }))\n            }\n            if (i.oatt) {\n              this.attributeList = i.oatt\n            }\n            return false\n          }\n        })\n      }\n    },\n    ...mapMutations(['setObjectAttribute'])\n  },\n  computed: {\n    showDecimal () {\n      return this.AttributeSetupFrom.attt && this.AttributeSetupFrom.attt.indexOf('word') !== -1\n    },\n    showReadTime () {\n      return this.AttributeSetupFrom.attr && this.AttributeSetupFrom.attr !== 'W'\n    },\n    canSubmit () {\n      return this.attributeList.length && this.attributeList.every(i => !i.aadd.some(j => j.addr === ''))\n    },\n    ...mapState({\n      objectData: state => state.SetUpData.objectData\n    })\n  },\n  watch: {\n    'AttributeSetupFrom.attt' (val) {\n      this.AttributeSetupFrom.deci = 0\n    }\n  },\n  created () {\n    this.init()\n  },\n  beforeRouteEnter (to, from, next) {\n    if (to.params.data) {\n      next()\n    } else {\n      next({ name: 'index' })\n    }\n  },\n  components: {\n    AttrbuteTable\n  }\n}\n</script>\n\n<style scoped lang='scss'>\n/deep/.el-input-number {\n  width: 100%;\n  &.is-without-controls .el-input__inner {\n    text-align: left;\n  }\n}\n.addrs {\n  border-bottom: 1px solid #ebeef5;\n  padding: 5px;\n  &:last-child {\n    border: none;\n  }\n}\n</style>\n"]}]}