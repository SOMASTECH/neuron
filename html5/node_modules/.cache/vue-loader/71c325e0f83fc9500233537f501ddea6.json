{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/components/WriteDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/components/WriteDialog.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    objName: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      propName: '',\n      dialogVisible: false,\n      val: ''\n    }\n  },\n  methods: {\n    handleShow (propName) {\n      console.log(propName, this.objName)\n      this.propName = propName\n      this.dialogVisible = true\n    },\n    handleSubmit () {\n      if (this.val) {\n        const params = {\n          func: 51,\n          'srcn': this.objName,\n          'attn': this.propName,\n          'valn': isNaN(+this.val) ? this.val : +this.val\n        }\n        this.$ws().send(params)\n      }\n      this.dialogVisible = false\n    },\n    handleClose () {\n      this.val = ''\n    }\n  },\n  mounted () {\n\n  }\n}\n",{"version":3,"sources":["WriteDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"WriteDialog.vue","sourceRoot":"src/pages/menus/Status/components","sourcesContent":["<template>\n  <el-dialog :title='propName'\n             :visible.sync=\"dialogVisible\"\n             width=\"500px\"\n             @closed=\"handleClose\">\n    <span>\n      value:\n    </span>\n    <el-input v-model=\"val\"\n              style='width:400px;'></el-input>\n    <span slot=\"footer\"\n          class=\"dialog-footer\">\n      <el-button @click=\"dialogVisible = false\">cancle</el-button>\n      <el-button type=\"primary\"\n                 @click=\"handleSubmit\">submit</el-button>\n    </span>\n  </el-dialog>\n</template>\n\n<script>\nexport default {\n  props: {\n    objName: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      propName: '',\n      dialogVisible: false,\n      val: ''\n    }\n  },\n  methods: {\n    handleShow (propName) {\n      console.log(propName, this.objName)\n      this.propName = propName\n      this.dialogVisible = true\n    },\n    handleSubmit () {\n      if (this.val) {\n        const params = {\n          func: 51,\n          'srcn': this.objName,\n          'attn': this.propName,\n          'valn': isNaN(+this.val) ? this.val : +this.val\n        }\n        this.$ws().send(params)\n      }\n      this.dialogVisible = false\n    },\n    handleClose () {\n      this.val = ''\n    }\n  },\n  mounted () {\n\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n</style>\n"]}]}