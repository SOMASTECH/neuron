{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/dataMonitoring.vue?vue&type=style&index=0&id=31c598a4&lang=scss&scoped=true&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/dataMonitoring.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/css-loader/index.js","mtime":1578022550180},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1578022550923},{"path":"/home/neuron/build/html5/node_modules/postcss-loader/src/index.js","mtime":1578022550766},{"path":"/home/neuron/build/html5/node_modules/sass-loader/dist/cjs.js","mtime":1578022582167},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.table {\n  width: 100%;\n  margin-top: 20px;\n}\n.noData {\n  text-align: center;\n  margin: 50px;\n}\n.btnGroup {\n  width: 700px;\n  /deep/.el-select {\n    width: 350px;\n  }\n}\n",{"version":3,"sources":["dataMonitoring.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dataMonitoring.vue","sourceRoot":"src/pages/menus/Status","sourcesContent":["<template>\n  <Container type=\"card-full\"\n             :scorll='false'>\n    <div class=\"row flex\">\n      <div class=\"dd-title\">Data Monitoring</div>\n      <div class=\"btnGroup\">\n        <span>Object Name: </span>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <el-select v-model=\"objName\">\n          <el-option v-for=\"item in objList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <el-button @click='handleShow(null,\"History\")'>history</el-button>\n        <el-button @click='handleShow(null,\"Current\")'>current</el-button>\n      </div>\n    </div>\n    <el-table :data=\"data\"\n              v-if='tableData.length'\n              border\n              :height='tableHeight'\n              class=\"table\">\n      <el-table-column width=\"55\">\n        <template slot=\"header\">\n          <el-checkbox @change='handleCheckAll'></el-checkbox>\n        </template>\n        <template slot-scope=\"scope\">\n          <el-checkbox v-model=\"scope.row.checked\"\n                       v-if='scope.row.prop!==\"Time\"'\n                       @change='handleCheck($event,scope.row)'></el-checkbox>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"prop\"\n                       label=\"attrbute\"\n                       min-width=\"180\">\n      </el-table-column>\n      <el-table-column prop=\"val\"\n                       label=\"value\"\n                       min-width=\"180\">\n      </el-table-column>\n      <el-table-column label=\" \"\n                       width=\"170\">\n        <template slot-scope=\"scope\">\n          <div class='btn'\n               v-if=\"scope.row.prop!=='Time'\">\n            <el-button type=\"text\"\n                       v-if=\"scope.row.writable\"\n                       @click='handleWrite(scope.row)'>write</el-button>\n            <el-button type=\"text\"\n                       @click='handleShow(scope.row,\"History\")'>history</el-button>\n            <el-button type=\"text\"\n                       @click='handleShow(scope.row,\"Current\")'>current</el-button>\n          </div>\n        </template>\n      </el-table-column>\n    </el-table>\n    <div v-else\n         class=\"noData\">\n      NO DATA\n    </div>\n    <CurrentChartDialog ref='CurrentChartDialog'\n                        :props='multipleSelection'\n                        :objName='objName' />\n    <HistoryChartDialog ref='HistoryChartDialog'\n                        :props='multipleSelection'\n                        :objName='objName' />\n    <WriteDialog ref='WriteDialog'\n                 :objName='objName' />\n  </Container>\n</template>\n\n<script>\nimport Mixins from '@/mixins'\nimport { mapState } from 'vuex'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      objName: '',\n      multipleSelection: [],\n      checkedAll: true\n    }\n  },\n  computed: {\n    ...mapState({\n      dataList: state => state.Status.alarmList,\n      objectData: state => state.SetUpData.objectData,\n      writableList: state => state.Status.writableList\n    }),\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50\n    },\n    objList () {\n      return this.dataList.map(i => i.objn)\n    },\n    tableData () {\n      return this.dataList.filter(i => i.objn === this.objName).map(i => {\n        if (i && i.tstp) {\n          i.tstp = this.format(i.tstp)\n        }\n        return i\n      })\n    },\n    tableKey () {\n      return Object.keys(this.tableData[0])\n    },\n    currentWritableData () {\n      return this.writableList.find(j => j.objn === this.objName) || {}\n    },\n    data () {\n      let data = []\n\n      this.tableKey.forEach(i => {\n        if (i !== 'objn') {\n          const checked = this.multipleSelection.find(j => j.prop === i)\n          data.push({\n            prop: i === 'tstp' ? 'Time' : i,\n            val: this.tableData[0][i],\n            writable: !!this.currentWritableData[i],\n            checked: checked ? checked.check : false\n          })\n        }\n      })\n      return data\n    }\n  },\n  watch: {\n    objList: {\n      handler (val) {\n        if (val.length && this.objName === '') {\n          this.objName = val[0]\n        }\n      }\n    },\n    objName: {\n      handler () {\n        this.multipleSelection = this.tableKey.map(i => ({\n          prop: i,\n          check: false\n        }))\n      }\n    }\n  },\n  methods: {\n    handleWrite (row) {\n      this.$refs.WriteDialog.handleShow(row.prop)\n    },\n    handleShow (row, type) {\n      this.$refs[type + 'ChartDialog'].handleShow(row)\n    },\n    handleCheck (e, row) {\n      this.multipleSelection.forEach(i => {\n        if (i.prop === row.prop) {\n          i.check = e\n        }\n      })\n    },\n    handleCheckAll (val) {\n      this.multipleSelection.forEach(i => {\n        i.check = val\n      })\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  },\n  components: {\n    CurrentChartDialog: () => import('./components/CurrentChartDialog'),\n    HistoryChartDialog: () => import('./components/HistoryChartDialog'),\n    WriteDialog: () => import('./components/WriteDialog')\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n.table {\n  width: 100%;\n  margin-top: 20px;\n}\n.noData {\n  text-align: center;\n  margin: 50px;\n}\n.btnGroup {\n  width: 700px;\n  /deep/.el-select {\n    width: 350px;\n  }\n}\n</style>\n"]}]}