{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Configuration/components/driverSetup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Configuration/components/driverSetup.vue","mtime":1586417712646},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import { Ethernet, Serial } from '@/config/index'\nimport { mapMutations, mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      dialogTableVisible: false,\n      chdv: '', // Channel driver name\n      chnl: [{}] // Channel Details\n    }\n  },\n  methods: {\n    ...mapMutations({\n      setDriverData: 'setDriverData'\n    }),\n    addEthernetFormItem () {\n      if (this.chnl.length && this.chnl.length < 9) {\n        this.chnl.push({\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        })\n      }\n    },\n    submit () {\n      this.dialogTableVisible = false\n      this.setDriverData({ chdv: this.chdv, chnl: this.chnl })\n    },\n    close () {\n      this.$nextTick(this.init)\n    },\n    init () {\n      const { chdv, chnl } = this.driverData\n      this.chdv = chdv\n      this.chnl = chnl\n    }\n  },\n  mounted () {\n    this.init()\n  },\n  watch: {\n    chdv () {\n      if (this.dialogTableVisible) {\n        this.chnl = [{\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        }]\n      }\n    }\n  },\n  computed: {\n    driverType () {\n      let tmp = this.driverList.find(i => i.val === this.chdv)\n      return tmp ? tmp.type : ''\n      // const chdv = this.chdv\n      // let tmp\n      // tmp = Ethernet.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Ethernet drivers'\n      // tmp = Serial.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Serial drivers'\n      // return ''\n    },\n    ...mapState({\n      driverData: state => state.SetUpData.driverData\n    }),\n    driverList () {\n      return this.$store.state.Device.deviceList\n    }\n  }\n}\n",{"version":3,"sources":["driverSetup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"driverSetup.vue","sourceRoot":"src/pages/menus/Configuration/components","sourcesContent":["<template>\n  <div style=\"display:inline-block;\">\n    <el-button @click=\"dialogTableVisible=true\">{{driverData.chdv===''?'New':'Edit'}} Driver</el-button>\n    <el-dialog title=\"Driver Setup\"\n               @closed='close'\n               :visible.sync=\"dialogTableVisible\">\n      <div class=\"row\">\n        <el-select v-model=\"chdv\">\n          <el-option v-for=\"item in driverList\"\n                     :key=\"item.val\"\n                     :label=\"item.label\"\n                     :value=\"item.val\">\n          </el-option>\n        </el-select>\n        &nbsp;&nbsp;\n        {{driverType}}\n      </div>\n      <div class=\"row\">\n        <template v-if=\"driverType==='Ethernet drivers'\">\n          <h3>Ethernet driver setup</h3>\n          <el-button @click=\"addEthernetFormItem\">add</el-button>\n          <el-form ref=\"driverSetupForm\"\n                   label-width=\"100px\">\n            <div v-for=\"(item,index) in chnl\"\n                 :key=\"index\"\n                 class=\"EthernetFormItem\">\n              <el-form-item :label=\"`Host name ${index+1}`\">\n                <el-input v-model=\"chnl[index].tcph\"></el-input>\n              </el-form-item>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <el-form-item :label=\"`Port no ${index+1}`\">\n                <el-input-number v-model=\"chnl[index].tcpp\"\n                                 :controls='false'\n                                 :precision='0'\n                                 :min=\"0\" />\n              </el-form-item>\n            </div>\n          </el-form>\n        </template>\n        <template v-else-if=\"driverType==='Serial drivers'\">\n          <h3>Serial driver setup</h3>\n          <el-form ref=\"driverSetupForm\"\n                   label-width=\"100px\"\n                   :model=\"chnl[0]\">\n            <el-form-item label=\"Device name\">\n              <el-input v-model=\"chnl[0].ttyc\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Baud rate\">\n              <el-input v-model=\"chnl[0].ttyb\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Data bit\">\n              <el-input v-model=\"chnl[0].ttyd\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Stop bit\">\n              <el-input v-model=\"chnl[0].ttys\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Parity bit\">\n              <el-input v-model=\"chnl[0].ttyp\"></el-input>\n            </el-form-item>\n          </el-form>\n        </template>\n      </div>\n      <el-button @click=\"submit\">submit</el-button>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n// import { Ethernet, Serial } from '@/config/index'\nimport { mapMutations, mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      dialogTableVisible: false,\n      chdv: '', // Channel driver name\n      chnl: [{}] // Channel Details\n    }\n  },\n  methods: {\n    ...mapMutations({\n      setDriverData: 'setDriverData'\n    }),\n    addEthernetFormItem () {\n      if (this.chnl.length && this.chnl.length < 9) {\n        this.chnl.push({\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        })\n      }\n    },\n    submit () {\n      this.dialogTableVisible = false\n      this.setDriverData({ chdv: this.chdv, chnl: this.chnl })\n    },\n    close () {\n      this.$nextTick(this.init)\n    },\n    init () {\n      const { chdv, chnl } = this.driverData\n      this.chdv = chdv\n      this.chnl = chnl\n    }\n  },\n  mounted () {\n    this.init()\n  },\n  watch: {\n    chdv () {\n      if (this.dialogTableVisible) {\n        this.chnl = [{\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        }]\n      }\n    }\n  },\n  computed: {\n    driverType () {\n      let tmp = this.driverList.find(i => i.val === this.chdv)\n      return tmp ? tmp.type : ''\n      // const chdv = this.chdv\n      // let tmp\n      // tmp = Ethernet.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Ethernet drivers'\n      // tmp = Serial.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Serial drivers'\n      // return ''\n    },\n    ...mapState({\n      driverData: state => state.SetUpData.driverData\n    }),\n    driverList () {\n      return this.$store.state.Device.deviceList\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.EthernetFormItem {\n  display: flex;\n}\n</style>\n"]}]}