{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/historicalAlarms.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/historicalAlarms.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Mixins from '@/mixins'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      data: [],\n      params: {},\n      time: [moment().subtract(1, 'hours'), moment()],\n      srch: '',\n      srchList: ['FromFirst', 'FromLast', 'UseID', 'Blank'],\n      sett: '',\n      settList: ['Today', 'Yesterday', 'ThisWeek', 'LastWeek', 'ThisMonth', 'LastMonth'],\n      cate: '',\n      cateList: ['critical', 'alarm', 'warning', 'event', 'view'],\n      patn: ''\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      if (tokn === '') this.data = []\n      let [start, end] = this.time\n      const { srch, sett, cate, patn } = this\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 81,\n        srch,\n        sett,\n        'ofst': 0,\n        'tokn': tokn,\n        cate,\n        patn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 81) {\n        if (data.rows) {\n          data.rows.forEach(i => this.data.push(i))\n        }\n        if (data.tokn) {\n          if (data.tokn === '-1') {\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  },\n  computed: {\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50 - 120\n    }\n  }\n}\n",{"version":3,"sources":["historicalAlarms.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"historicalAlarms.vue","sourceRoot":"src/pages/menus/Status","sourcesContent":["<template>\n  <Container type=\"card-full\"\n             :scorll='false'>\n    <div class=\"dd-title\">Historical Alarms</div>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        date: <el-date-picker v-model=\"time\"\n                        class=\"input\"\n                        range-separator=\"-\"\n                        start-placeholder=\"start\"\n                        end-placeholder=\"end\"\n                        type=\"datetimerange\">\n        </el-date-picker>\n      </el-col>\n      <el-col :span=\"4\">\n        srch: <el-select v-model=\"srch\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in srchList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :span=\"4\">\n        sett: <el-select v-model=\"sett\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in settList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :span=\"4\">\n        cate: <el-select v-model=\"cate\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in cateList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-row>\n    <el-row :gutter=\"20\"\n            class=\"dd-mt\">\n      <el-col :span='6'>\n        patn: <el-input v-model=\"patn\"\n                  class=\"input\"></el-input>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-button class=\"btn\"\n                   @click='handleSubmit(\"\")'>submit</el-button>\n      </el-col>\n    </el-row>\n    <el-table :data='data'\n              border\n              :height='tableHeight'\n              style=\"width: 100%;margin-top:20px;\">\n      <el-table-column min-width=\"30\"\n                       prop=\"anum\"\n                       label=\"Index\" />\n      <el-table-column min-width=\"130\"\n                       label=\"Time\">\n        <template slot-scope=\"scope\">\n          {{format(scope.row.tstp||'')}}\n        </template>\n      </el-table-column>\n      <el-table-column min-width=\"60\"\n                       prop=\"cate\"\n                       label=\"Categ\" />\n      <el-table-column prop=\"stat\"\n                       label=\"State\"\n                       min-width=\"50\" />\n      <el-table-column prop=\"uack\"\n                       min-width=\"50\"\n                       label=\"Uack\">\n      </el-table-column>\n      <el-table-column prop=\"comt\"\n                       min-width=\"400\"\n                       label=\"Alarm message\" />\n    </el-table>\n  </Container>\n</template>\n\n<script>\nimport Mixins from '@/mixins'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      data: [],\n      params: {},\n      time: [moment().subtract(1, 'hours'), moment()],\n      srch: '',\n      srchList: ['FromFirst', 'FromLast', 'UseID', 'Blank'],\n      sett: '',\n      settList: ['Today', 'Yesterday', 'ThisWeek', 'LastWeek', 'ThisMonth', 'LastMonth'],\n      cate: '',\n      cateList: ['critical', 'alarm', 'warning', 'event', 'view'],\n      patn: ''\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      if (tokn === '') this.data = []\n      let [start, end] = this.time\n      const { srch, sett, cate, patn } = this\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 81,\n        srch,\n        sett,\n        'ofst': 0,\n        'tokn': tokn,\n        cate,\n        patn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 81) {\n        if (data.rows) {\n          data.rows.forEach(i => this.data.push(i))\n        }\n        if (data.tokn) {\n          if (data.tokn === '-1') {\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  },\n  computed: {\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50 - 120\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n.input {\n  width: calc(100% - 46px);\n}\n</style>\n"]}]}