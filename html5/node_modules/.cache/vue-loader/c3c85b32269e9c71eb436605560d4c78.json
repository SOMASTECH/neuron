{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/components/CurrentChartDialog.vue?vue&type=style&index=0&id=e4b97ba8&lang=scss&scoped=true&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/components/CurrentChartDialog.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/css-loader/index.js","mtime":1578022550180},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1578022550923},{"path":"/home/neuron/build/html5/node_modules/postcss-loader/src/index.js","mtime":1578022550766},{"path":"/home/neuron/build/html5/node_modules/sass-loader/dist/cjs.js","mtime":1578022582167},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/deep/.el-dialog__body {\n  padding: 0;\n}\n",{"version":3,"sources":["CurrentChartDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AACA;AACA","file":"CurrentChartDialog.vue","sourceRoot":"src/pages/menus/Status/components","sourcesContent":["<template>\n  <el-dialog :title='propName||objName'\n             :visible.sync=\"dialogVisible\"\n             width=\"900px\"\n             @closed=\"handleClose\">\n    <div :style=\"chartStyle\"\n         ref=\"chartContainer\"></div>\n  </el-dialog>\n</template>\n\n<script>\nimport charts from 'echarts'\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data () {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    }\n  },\n  computed: {\n    chartStyle () {\n      return {\n        width: '900px',\n        height: '700px'\n      }\n    },\n    status () {\n      return this.$store.state.Status.alarmList.find(i => i.objn === this.objName)\n    }\n  },\n  watch: {\n    status: {\n      handler (val) {\n        if (this.chartInstance && this.dialogVisible) {\n          const dataList = this.option.series\n          const timeList = this.option.xAxis.data\n          // if (dataList[0].data.length > 50) {\n          //   dataList.forEach(i => i.data.shift())\n          //   timeList.shift()\n          // }\n          dataList.forEach(i => {\n            i.data.push(this.status[i.name])\n          })\n          timeList.push(this.status.tstp.split(' ')[1])\n          this.chartInstance.setOption(this.option)\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    initChart () {\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer)\n      }\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          areaStyle: {},\n          name: this.propName\n        })\n      } else {\n        this.props.filter(i => i.check).map(i => i.prop).forEach(i => {\n          if (i !== 'tstp' && i !== 'objn') {\n            this.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            })\n          }\n        })\n      }\n      this.chartInstance.setOption(this.option)\n    },\n    handleClose () {\n      this.option.series = []\n      this.option.xAxis.data = []\n      this.propName = null\n      this.chartInstance.clear()\n    },\n    handleShow (row) {\n      this.propName = row ? row.prop : null\n      this.dialogVisible = true\n      this.$nextTick(this.initChart)\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n/deep/.el-dialog__body {\n  padding: 0;\n}\n</style>\n"]}]}