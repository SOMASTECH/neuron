{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Configuration/components/scriptType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Configuration/components/scriptType.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: ['value'],\n  data () {\n    return {\n      scriptType: null,\n      scriptTypeList: [\n        { name: 'Main', subr: -10 },\n        { name: 'Auto', subr: -20 },\n        { name: 'Manual', subr: -30 }\n      ],\n      dialogVisible: false,\n      subroutineForm: {\n        name: '',\n        subr: ''\n      },\n      subroutineFormRules: {\n        name: [\n          { required: true, message: '', trigger: 'blur' }\n        ],\n        subr: [\n          { required: true, message: '', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.$ws().set({ success: this.setSubroutineList }).send({ func: 32 })\n    },\n    setSubroutineList (data) {\n      if (data.func === 32) {\n        this.$ws().remove(this.setSubroutineList)\n        data.rows.forEach(i => {\n          if (!this.scriptTypeList.some(j => j.subr === i.subr)) {\n            this.scriptTypeList.unshift({\n              subr: i.subr,\n              name: `${i.subr}     ${i.name}`\n            })\n          }\n        })\n      }\n    },\n    handleCreate () {\n      this.dialogVisible = true\n    },\n    handleDelete () {\n      this.$confirm('Are you sure delete this subroutine?', 'Delete', {\n        type: 'warning'\n      }).then(() => {\n        const list = [-10, -20, -30]\n        if (this.scriptType.subr && !list.includes(this.scriptType.subr)) {\n          this.$ws().send({ func: 35, subr: this.scriptType.subr })\n          const res = this.scriptTypeList.filter(i => list.includes(i.subr) || (i.subr !== this.scriptType.subr))\n          if (res.length !== this.scriptTypeList.length) {\n            this.scriptTypeList = res\n            this.scriptType = {\n              name: '',\n              subr: ''\n            }\n          }\n          this.$emit('delete')\n        }\n      }).catch(() => {\n      })\n    },\n    handleClose () {\n      this.$refs.subroutineForm.resetFields()\n      this.subroutineForm = {\n        name: '',\n        subr: ''\n      }\n    },\n    handleSubmit () {\n      this.$refs.subroutineForm.validate((valid) => {\n        if (valid) {\n          const { name, subr } = this.subroutineForm\n          if (!this.scriptTypeList.some(i => i.subr === subr)) {\n            this.$emit('submit', name, subr)\n            this.init()\n            this.dialogVisible = false\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    handleSelect (e) {\n      if (e) {\n        const res = this.scriptTypeList.filter(i => i.subr === e)\n        // debugger\n        this.scriptType = {\n          name: res[0].name,\n          subr: res[0].subr\n        }\n        this.$emit('input', this.scriptType)\n      }\n    }\n  },\n  watch: {\n    value: {\n      handler (val) {\n        this.scriptType = val\n      },\n      immediate: true\n    }\n  }\n}\n",{"version":3,"sources":["scriptType.vue"],"names":[],"mappingsfile":"scriptType.vue","sourceRoot":"src/pages/menus/Configuration/components","sourcesContent":["<template>\n  <div style=\"display:inline-block;\">\n    <span>subroutine:</span>\n    &nbsp;&nbsp;\n    <el-select v-model=\"scriptType.subr\"\n               style=\"width:300px;\"\n               @change=\"handleSelect\"\n               placeholder=\"\">\n      <el-option v-for=\"item in scriptTypeList\"\n                 :key=\"item.subr\"\n                 :label=\"item.name\"\n                 :value=\"item.subr\">\n      </el-option>\n    </el-select>\n    &nbsp;&nbsp;\n    <el-button @click='handleDelete'\n               type='danger'>delete</el-button>\n    <el-button @click='handleCreate'\n               type=\"primary\">create</el-button>\n\n    <el-dialog title=\"Create Subroutine\"\n               @closed='handleClose'\n               :visible.sync=\"dialogVisible\">\n      <el-form :model=\"subroutineForm\"\n               :rules=\"subroutineFormRules\"\n               label-width=\"100px\"\n               ref='subroutineForm'>\n        <el-form-item prop=\"name\"\n                      label=\"name\">\n          <el-input v-model=\"subroutineForm.name\"></el-input>\n        </el-form-item>\n        <el-form-item prop=\"subr\"\n                      label=\"subr\">\n          <el-input v-model=\"subroutineForm.subr\"></el-input>\n        </el-form-item>\n      </el-form>\n      <template slot=\"footer\">\n        <el-button @click=\"dialogVisible = false\">cancel</el-button>\n        <el-button type=\"primary\"\n                   @click=\"handleSubmit\">submit</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['value'],\n  data () {\n    return {\n      scriptType: null,\n      scriptTypeList: [\n        { name: 'Main', subr: -10 },\n        { name: 'Auto', subr: -20 },\n        { name: 'Manual', subr: -30 }\n      ],\n      dialogVisible: false,\n      subroutineForm: {\n        name: '',\n        subr: ''\n      },\n      subroutineFormRules: {\n        name: [\n          { required: true, message: '', trigger: 'blur' }\n        ],\n        subr: [\n          { required: true, message: '', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  beforeMount () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.$ws().set({ success: this.setSubroutineList }).send({ func: 32 })\n    },\n    setSubroutineList (data) {\n      if (data.func === 32) {\n        this.$ws().remove(this.setSubroutineList)\n        data.rows.forEach(i => {\n          if (!this.scriptTypeList.some(j => j.subr === i.subr)) {\n            this.scriptTypeList.unshift({\n              subr: i.subr,\n              name: `${i.subr}     ${i.name}`\n            })\n          }\n        })\n      }\n    },\n    handleCreate () {\n      this.dialogVisible = true\n    },\n    handleDelete () {\n      this.$confirm('Are you sure delete this subroutine?', 'Delete', {\n        type: 'warning'\n      }).then(() => {\n        const list = [-10, -20, -30]\n        if (this.scriptType.subr && !list.includes(this.scriptType.subr)) {\n          this.$ws().send({ func: 35, subr: this.scriptType.subr })\n          const res = this.scriptTypeList.filter(i => list.includes(i.subr) || (i.subr !== this.scriptType.subr))\n          if (res.length !== this.scriptTypeList.length) {\n            this.scriptTypeList = res\n            this.scriptType = {\n              name: '',\n              subr: ''\n            }\n          }\n          this.$emit('delete')\n        }\n      }).catch(() => {\n      })\n    },\n    handleClose () {\n      this.$refs.subroutineForm.resetFields()\n      this.subroutineForm = {\n        name: '',\n        subr: ''\n      }\n    },\n    handleSubmit () {\n      this.$refs.subroutineForm.validate((valid) => {\n        if (valid) {\n          const { name, subr } = this.subroutineForm\n          if (!this.scriptTypeList.some(i => i.subr === subr)) {\n            this.$emit('submit', name, subr)\n            this.init()\n            this.dialogVisible = false\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    handleSelect (e) {\n      if (e) {\n        const res = this.scriptTypeList.filter(i => i.subr === e)\n        // debugger\n        this.scriptType = {\n          name: res[0].name,\n          subr: res[0].subr\n        }\n        this.$emit('input', this.scriptType)\n      }\n    }\n  },\n  watch: {\n    value: {\n      handler (val) {\n        this.scriptType = val\n      },\n      immediate: true\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n</style>\n"]}]}