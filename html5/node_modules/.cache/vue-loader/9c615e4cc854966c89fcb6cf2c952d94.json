{"remainingRequest":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/components/HistoryChartDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/components/HistoryChartDialog.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport charts from 'echarts'\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data () {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      params: {},\n      time: [new Date(), new Date()],\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    }\n  },\n  computed: {\n    chartStyle () {\n      return {\n        width: '900px',\n        height: '700px'\n      }\n    },\n    status () {\n      return this.$store.state.Status.alarmList.find(i => i.objn === this.objName)\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      let [start, end] = this.time\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 82,\n        'srcn': this.objName,\n        'attn': this.propName || '',\n        'fend': 0,\n        'tokn': tokn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 82) {\n        data.tele && data.tele.forEach(i => {\n          const dataList = this.option.series\n          const timeList = this.option.xAxis.data\n          dataList.forEach(j => j.data.push(i[j.name]))\n          timeList.push(moment(i.tstp * 1000).format('YYYY-MM-DD HH:mm:ss'))\n        })\n        if (data.tokn) {\n          if (data.tokn === -1) {\n            this.chartInstance.setOption(this.option)\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    initChart () {\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer)\n      }\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          name: this.propName\n        })\n      } else {\n        this.props.filter(i => i.check).map(i => i.prop).forEach(i => {\n          if (i !== 'tstp' && i !== 'objn') {\n            this.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            })\n          }\n        })\n      }\n      this.chartInstance.setOption(this.option)\n    },\n    handleClose () {\n      this.option.series = []\n      this.option.xAxis.data = []\n      this.propName = null\n      this.params = {}\n      this.chartInstance.clear()\n    },\n    handleShow (row, type) {\n      this.time = [moment().subtract(1, 'hours'), moment()]\n      this.propName = row ? row.prop : null\n      this.dialogVisible = true\n      this.$nextTick(this.initChart)\n    }\n  }\n}\n",{"version":3,"sources":["HistoryChartDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"HistoryChartDialog.vue","sourceRoot":"src/pages/menus/Status/components","sourcesContent":["<template>\n  <el-dialog :title='propName||objName'\n             :visible.sync=\"dialogVisible\"\n             width=\"900px\"\n             @closed=\"handleClose\">\n    <div class=\"select\">\n      <el-date-picker v-model=\"time\"\n                      range-separator=\"-\"\n                      start-placeholder=\"start\"\n                      end-placeholder=\"end\"\n                      type=\"datetimerange\">\n      </el-date-picker>\n      &nbsp;&nbsp;&nbsp;&nbsp;\n      <el-button @click=\"handleSubmit(-1)\">submit</el-button>\n    </div>\n    <div :style=\"chartStyle\"\n         ref=\"chartContainer\"></div>\n  </el-dialog>\n</template>\n\n<script>\nimport moment from 'moment'\nimport charts from 'echarts'\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data () {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      params: {},\n      time: [new Date(), new Date()],\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    }\n  },\n  computed: {\n    chartStyle () {\n      return {\n        width: '900px',\n        height: '700px'\n      }\n    },\n    status () {\n      return this.$store.state.Status.alarmList.find(i => i.objn === this.objName)\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      let [start, end] = this.time\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 82,\n        'srcn': this.objName,\n        'attn': this.propName || '',\n        'fend': 0,\n        'tokn': tokn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 82) {\n        data.tele && data.tele.forEach(i => {\n          const dataList = this.option.series\n          const timeList = this.option.xAxis.data\n          dataList.forEach(j => j.data.push(i[j.name]))\n          timeList.push(moment(i.tstp * 1000).format('YYYY-MM-DD HH:mm:ss'))\n        })\n        if (data.tokn) {\n          if (data.tokn === -1) {\n            this.chartInstance.setOption(this.option)\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    initChart () {\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer)\n      }\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          name: this.propName\n        })\n      } else {\n        this.props.filter(i => i.check).map(i => i.prop).forEach(i => {\n          if (i !== 'tstp' && i !== 'objn') {\n            this.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            })\n          }\n        })\n      }\n      this.chartInstance.setOption(this.option)\n    },\n    handleClose () {\n      this.option.series = []\n      this.option.xAxis.data = []\n      this.propName = null\n      this.params = {}\n      this.chartInstance.clear()\n    },\n    handleShow (row, type) {\n      this.time = [moment().subtract(1, 'hours'), moment()]\n      this.propName = row ? row.prop : null\n      this.dialogVisible = true\n      this.$nextTick(this.initChart)\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n/deep/.el-dialog__body {\n  padding: 0;\n}\n.select {\n  padding: 20px;\n}\n</style>\n"]}]}