{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/neuron/build/html5/src/store/modules/Device.js","dependencies":[{"path":"/home/neuron/build/html5/src/store/modules/Device.js","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1578022543487}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nexport default {\n  state: {\n    deviceList: []\n  },\n  mutations: {\n    setDeviceList: function setDeviceList(state, data) {\n      state.deviceList = data.map(function (i) {\n        var type = i.type;\n        type = type === 'tty' ? 'Serial drivers' : type;\n        type = type === 'tcp' ? 'Ethernet drivers' : type;\n        return {\n          label: i.desc,\n          val: i.name,\n          type: type\n        };\n      });\n    }\n  },\n  getters: {\n    deviceObj: function deviceObj(state, getters) {\n      return state.deviceList.find(function (i) {\n        return i.val === getters.res.chdv;\n      }) || {};\n    }\n  }\n};",{"version":3,"sources":["/home/neuron/build/html5/src/store/modules/Device.js"],"names":["state","deviceList","mutations","setDeviceList","data","map","i","type","label","desc","val","name","getters","deviceObj","find","res","chdv"],"mappings":";;AAAA,eAAe;AACbA,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE;AADP,GADM;AAIbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aADS,yBACMH,KADN,EACaI,IADb,EACmB;AAC1BJ,MAAAA,KAAK,CAACC,UAAN,GAAmBG,IAAI,CAACC,GAAL,CAAS,UAAAC,CAAC,EAAI;AAC/B,YAAIC,IAAI,GAAGD,CAAC,CAACC,IAAb;AACAA,QAAAA,IAAI,GAAGA,IAAI,KAAK,KAAT,GAAiB,gBAAjB,GAAoCA,IAA3C;AACAA,QAAAA,IAAI,GAAGA,IAAI,KAAK,KAAT,GAAiB,kBAAjB,GAAsCA,IAA7C;AACA,eAAO;AACLC,UAAAA,KAAK,EAAEF,CAAC,CAACG,IADJ;AAELC,UAAAA,GAAG,EAAEJ,CAAC,CAACK,IAFF;AAGLJ,UAAAA,IAAI,EAAJA;AAHK,SAAP;AAKD,OATkB,CAAnB;AAUD;AAZQ,GAJE;AAkBbK,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,mBAACb,KAAD,EAAQY,OAAR,EAAoB;AAC7B,aAAOZ,KAAK,CAACC,UAAN,CAAiBa,IAAjB,CAAsB,UAAAR,CAAC;AAAA,eAAIA,CAAC,CAACI,GAAF,KAAUE,OAAO,CAACG,GAAR,CAAYC,IAA1B;AAAA,OAAvB,KAA0D,EAAjE;AACD;AAHM;AAlBI,CAAf","sourcesContent":["export default {\n  state: {\n    deviceList: []\n  },\n  mutations: {\n    setDeviceList (state, data) {\n      state.deviceList = data.map(i => {\n        let type = i.type\n        type = type === 'tty' ? 'Serial drivers' : type\n        type = type === 'tcp' ? 'Ethernet drivers' : type\n        return {\n          label: i.desc,\n          val: i.name,\n          type\n        }\n      })\n    }\n  },\n  getters: {\n    deviceObj: (state, getters) => {\n      return state.deviceList.find(i => i.val === getters.res.chdv) || {}\n    }\n  }\n}\n"]}]}