{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/components/CurrentChartDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/components/CurrentChartDialog.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport charts from 'echarts';\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    };\n  },\n  computed: {\n    chartStyle: function chartStyle() {\n      return {\n        width: '900px',\n        height: '700px'\n      };\n    },\n    status: function status() {\n      var _this = this;\n\n      return this.$store.state.Status.alarmList.find(function (i) {\n        return i.objn === _this.objName;\n      });\n    }\n  },\n  watch: {\n    status: {\n      handler: function handler(val) {\n        var _this2 = this;\n\n        if (this.chartInstance && this.dialogVisible) {\n          var dataList = this.option.series;\n          var timeList = this.option.xAxis.data; // if (dataList[0].data.length > 50) {\n          //   dataList.forEach(i => i.data.shift())\n          //   timeList.shift()\n          // }\n\n          dataList.forEach(function (i) {\n            i.data.push(_this2.status[i.name]);\n          });\n          timeList.push(this.status.tstp.split(' ')[1]);\n          this.chartInstance.setOption(this.option);\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    initChart: function initChart() {\n      var _this3 = this;\n\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer);\n      }\n\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          areaStyle: {},\n          name: this.propName\n        });\n      } else {\n        this.props.filter(function (i) {\n          return i.check;\n        }).map(function (i) {\n          return i.prop;\n        }).forEach(function (i) {\n          if (i !== 'tstp' && i !== 'objn') {\n            _this3.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            });\n          }\n        });\n      }\n\n      this.chartInstance.setOption(this.option);\n    },\n    handleClose: function handleClose() {\n      this.option.series = [];\n      this.option.xAxis.data = [];\n      this.propName = null;\n      this.chartInstance.clear();\n    },\n    handleShow: function handleShow(row) {\n      this.propName = row ? row.prop : null;\n      this.dialogVisible = true;\n      this.$nextTick(this.initChart);\n    }\n  }\n};",{"version":3,"sources":["CurrentChartDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-dialog :title='propName||objName'\n             :visible.sync=\"dialogVisible\"\n             width=\"900px\"\n             @closed=\"handleClose\">\n    <div :style=\"chartStyle\"\n         ref=\"chartContainer\"></div>\n  </el-dialog>\n</template>\n\n<script>\nimport charts from 'echarts'\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data () {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    }\n  },\n  computed: {\n    chartStyle () {\n      return {\n        width: '900px',\n        height: '700px'\n      }\n    },\n    status () {\n      return this.$store.state.Status.alarmList.find(i => i.objn === this.objName)\n    }\n  },\n  watch: {\n    status: {\n      handler (val) {\n        if (this.chartInstance && this.dialogVisible) {\n          const dataList = this.option.series\n          const timeList = this.option.xAxis.data\n          // if (dataList[0].data.length > 50) {\n          //   dataList.forEach(i => i.data.shift())\n          //   timeList.shift()\n          // }\n          dataList.forEach(i => {\n            i.data.push(this.status[i.name])\n          })\n          timeList.push(this.status.tstp.split(' ')[1])\n          this.chartInstance.setOption(this.option)\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    initChart () {\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer)\n      }\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          areaStyle: {},\n          name: this.propName\n        })\n      } else {\n        this.props.filter(i => i.check).map(i => i.prop).forEach(i => {\n          if (i !== 'tstp' && i !== 'objn') {\n            this.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            })\n          }\n        })\n      }\n      this.chartInstance.setOption(this.option)\n    },\n    handleClose () {\n      this.option.series = []\n      this.option.xAxis.data = []\n      this.propName = null\n      this.chartInstance.clear()\n    },\n    handleShow (row) {\n      this.propName = row ? row.prop : null\n      this.dialogVisible = true\n      this.$nextTick(this.initChart)\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n/deep/.el-dialog__body {\n  padding: 0;\n}\n</style>\n"],"sourceRoot":"src/pages/menus/Status/components"}]}