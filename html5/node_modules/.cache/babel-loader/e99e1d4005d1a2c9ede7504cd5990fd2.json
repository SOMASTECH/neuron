{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Configuration/components/driverSetup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Configuration/components/driverSetup.vue","mtime":1586417712646},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/home/neuron/build/html5/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { Ethernet, Serial } from '@/config/index'\nimport { mapMutations, mapState } from 'vuex';\nexport default {\n  data: function data() {\n    return {\n      dialogTableVisible: false,\n      chdv: '',\n      // Channel driver name\n      chnl: [{}] // Channel Details\n\n    };\n  },\n  methods: _objectSpread({}, mapMutations({\n    setDriverData: 'setDriverData'\n  }), {\n    addEthernetFormItem: function addEthernetFormItem() {\n      if (this.chnl.length && this.chnl.length < 9) {\n        this.chnl.push({\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        });\n      }\n    },\n    submit: function submit() {\n      this.dialogTableVisible = false;\n      this.setDriverData({\n        chdv: this.chdv,\n        chnl: this.chnl\n      });\n    },\n    close: function close() {\n      this.$nextTick(this.init);\n    },\n    init: function init() {\n      var _this$driverData = this.driverData,\n          chdv = _this$driverData.chdv,\n          chnl = _this$driverData.chnl;\n      this.chdv = chdv;\n      this.chnl = chnl;\n    }\n  }),\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    chdv: function chdv() {\n      if (this.dialogTableVisible) {\n        this.chnl = [{\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        }];\n      }\n    }\n  },\n  computed: _objectSpread({\n    driverType: function driverType() {\n      var _this = this;\n\n      var tmp = this.driverList.find(function (i) {\n        return i.val === _this.chdv;\n      });\n      return tmp ? tmp.type : ''; // const chdv = this.chdv\n      // let tmp\n      // tmp = Ethernet.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Ethernet drivers'\n      // tmp = Serial.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Serial drivers'\n      // return ''\n    }\n  }, mapState({\n    driverData: function driverData(state) {\n      return state.SetUpData.driverData;\n    }\n  }), {\n    driverList: function driverList() {\n      return this.$store.state.Device.deviceList;\n    }\n  })\n};",{"version":3,"sources":["driverSetup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AACA,SAAA,YAAA,EAAA,QAAA,QAAA,MAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA,KADA;AAEA,MAAA,IAAA,EAAA,EAFA;AAEA;AACA,MAAA,IAAA,EAAA,CAAA,EAAA,CAHA,CAGA;;AAHA,KAAA;AAKA,GAPA;AAQA,EAAA,OAAA,oBACA,YAAA,CAAA;AACA,IAAA,aAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,mBAJA,iCAIA;AACA,UAAA,KAAA,IAAA,CAAA,MAAA,IAAA,KAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,EAAA,EADA;AAEA,UAAA,IAAA,EAAA,EAFA;AAGA,kBAAA,EAHA;AAIA,kBAAA,CAJA;AAKA,kBAAA,CALA;AAMA,kBAAA,EANA;AAOA,kBAAA;AAPA,SAAA;AASA;AACA,KAhBA;AAiBA,IAAA,MAjBA,oBAiBA;AACA,WAAA,kBAAA,GAAA,KAAA;AACA,WAAA,aAAA,CAAA;AAAA,QAAA,IAAA,EAAA,KAAA,IAAA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,OAAA;AACA,KApBA;AAqBA,IAAA,KArBA,mBAqBA;AACA,WAAA,SAAA,CAAA,KAAA,IAAA;AACA,KAvBA;AAwBA,IAAA,IAxBA,kBAwBA;AAAA,6BACA,KAAA,UADA;AAAA,UACA,IADA,oBACA,IADA;AAAA,UACA,IADA,oBACA,IADA;AAEA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA;AA5BA,IARA;AAsCA,EAAA,OAtCA,qBAsCA;AACA,SAAA,IAAA;AACA,GAxCA;AAyCA,EAAA,KAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,UAAA,KAAA,kBAAA,EAAA;AACA,aAAA,IAAA,GAAA,CAAA;AACA,UAAA,IAAA,EAAA,EADA;AAEA,UAAA,IAAA,EAAA,EAFA;AAGA,kBAAA,EAHA;AAIA,kBAAA,CAJA;AAKA,kBAAA,CALA;AAMA,kBAAA,EANA;AAOA,kBAAA;AAPA,SAAA,CAAA;AASA;AACA;AAbA,GAzCA;AAwDA,EAAA,QAAA;AACA,IAAA,UADA,wBACA;AAAA;;AACA,UAAA,GAAA,GAAA,KAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,GAAA,KAAA,KAAA,CAAA,IAAA;AAAA,OAAA,CAAA;AACA,aAAA,GAAA,GAAA,GAAA,CAAA,IAAA,GAAA,EAAA,CAFA,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,KAYA,QAAA,CAAA;AACA,IAAA,UAAA,EAAA,oBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,SAAA,CAAA,UAAA;AAAA;AADA,GAAA,CAZA;AAeA,IAAA,UAfA,wBAeA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA;AACA;AAjBA;AAxDA,CAAA","sourcesContent":["<template>\n  <div style=\"display:inline-block;\">\n    <el-button @click=\"dialogTableVisible=true\">{{driverData.chdv===''?'New':'Edit'}} Driver</el-button>\n    <el-dialog title=\"Driver Setup\"\n               @closed='close'\n               :visible.sync=\"dialogTableVisible\">\n      <div class=\"row\">\n        <el-select v-model=\"chdv\">\n          <el-option v-for=\"item in driverList\"\n                     :key=\"item.val\"\n                     :label=\"item.label\"\n                     :value=\"item.val\">\n          </el-option>\n        </el-select>\n        &nbsp;&nbsp;\n        {{driverType}}\n      </div>\n      <div class=\"row\">\n        <template v-if=\"driverType==='Ethernet drivers'\">\n          <h3>Ethernet driver setup</h3>\n          <el-button @click=\"addEthernetFormItem\">add</el-button>\n          <el-form ref=\"driverSetupForm\"\n                   label-width=\"100px\">\n            <div v-for=\"(item,index) in chnl\"\n                 :key=\"index\"\n                 class=\"EthernetFormItem\">\n              <el-form-item :label=\"`Host name ${index+1}`\">\n                <el-input v-model=\"chnl[index].tcph\"></el-input>\n              </el-form-item>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <el-form-item :label=\"`Port no ${index+1}`\">\n                <el-input-number v-model=\"chnl[index].tcpp\"\n                                 :controls='false'\n                                 :precision='0'\n                                 :min=\"0\" />\n              </el-form-item>\n            </div>\n          </el-form>\n        </template>\n        <template v-else-if=\"driverType==='Serial drivers'\">\n          <h3>Serial driver setup</h3>\n          <el-form ref=\"driverSetupForm\"\n                   label-width=\"100px\"\n                   :model=\"chnl[0]\">\n            <el-form-item label=\"Device name\">\n              <el-input v-model=\"chnl[0].ttyc\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Baud rate\">\n              <el-input v-model=\"chnl[0].ttyb\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Data bit\">\n              <el-input v-model=\"chnl[0].ttyd\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Stop bit\">\n              <el-input v-model=\"chnl[0].ttys\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"Parity bit\">\n              <el-input v-model=\"chnl[0].ttyp\"></el-input>\n            </el-form-item>\n          </el-form>\n        </template>\n      </div>\n      <el-button @click=\"submit\">submit</el-button>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n// import { Ethernet, Serial } from '@/config/index'\nimport { mapMutations, mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      dialogTableVisible: false,\n      chdv: '', // Channel driver name\n      chnl: [{}] // Channel Details\n    }\n  },\n  methods: {\n    ...mapMutations({\n      setDriverData: 'setDriverData'\n    }),\n    addEthernetFormItem () {\n      if (this.chnl.length && this.chnl.length < 9) {\n        this.chnl.push({\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        })\n      }\n    },\n    submit () {\n      this.dialogTableVisible = false\n      this.setDriverData({ chdv: this.chdv, chnl: this.chnl })\n    },\n    close () {\n      this.$nextTick(this.init)\n    },\n    init () {\n      const { chdv, chnl } = this.driverData\n      this.chdv = chdv\n      this.chnl = chnl\n    }\n  },\n  mounted () {\n    this.init()\n  },\n  watch: {\n    chdv () {\n      if (this.dialogTableVisible) {\n        this.chnl = [{\n          tcph: '',\n          tcpp: '',\n          'ttyc': '',\n          'ttyb': 0,\n          'ttyd': 0,\n          'ttys': '',\n          'ttyp': ''\n        }]\n      }\n    }\n  },\n  computed: {\n    driverType () {\n      let tmp = this.driverList.find(i => i.val === this.chdv)\n      return tmp ? tmp.type : ''\n      // const chdv = this.chdv\n      // let tmp\n      // tmp = Ethernet.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Ethernet drivers'\n      // tmp = Serial.filter(i => i.val === chdv)[0]\n      // if (tmp) return 'Serial drivers'\n      // return ''\n    },\n    ...mapState({\n      driverData: state => state.SetUpData.driverData\n    }),\n    driverList () {\n      return this.$store.state.Device.deviceList\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.EthernetFormItem {\n  display: flex;\n}\n</style>\n"],"sourceRoot":"src/pages/menus/Configuration/components"}]}