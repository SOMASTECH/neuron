{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/historicalAlarms.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/historicalAlarms.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"/home/neuron/build/html5/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Mixins from '@/mixins';\nimport moment from 'moment';\nexport default {\n  mixins: [Mixins],\n  data: function data() {\n    return {\n      data: [],\n      params: {},\n      time: [moment().subtract(1, 'hours'), moment()],\n      srch: '',\n      srchList: ['FromFirst', 'FromLast', 'UseID', 'Blank'],\n      sett: '',\n      settList: ['Today', 'Yesterday', 'ThisWeek', 'LastWeek', 'ThisMonth', 'LastMonth'],\n      cate: '',\n      cateList: ['critical', 'alarm', 'warning', 'event', 'view'],\n      patn: ''\n    };\n  },\n  methods: {\n    handleSubmit: function handleSubmit(tokn) {\n      if (tokn === '') this.data = [];\n\n      var _this$time = _slicedToArray(this.time, 2),\n          start = _this$time[0],\n          end = _this$time[1];\n\n      var srch = this.srch,\n          sett = this.sett,\n          cate = this.cate,\n          patn = this.patn;\n      start = moment(start);\n      end = moment(end);\n      this.params = {\n        'func': 81,\n        srch: srch,\n        sett: sett,\n        'ofst': 0,\n        'tokn': tokn,\n        cate: cate,\n        patn: patn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      };\n      this.$ws().set({\n        success: this.setData\n      }).send(this.params);\n    },\n    setData: function setData(data) {\n      var _this = this;\n\n      if (data.func === 81) {\n        if (data.rows) {\n          data.rows.forEach(function (i) {\n            return _this.data.push(i);\n          });\n        }\n\n        if (data.tokn) {\n          if (data.tokn === '-1') {\n            this.$ws().remove(this.setData);\n          } else {\n            this.handleSubmit(data.tokn);\n          }\n        }\n      }\n    },\n    format: function format(time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss');\n    }\n  },\n  computed: {\n    tableHeight: function tableHeight() {\n      return window.innerHeight - 60 - 50 - 40 - 50 - 120;\n    }\n  }\n};",{"version":3,"sources":["historicalAlarms.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <Container type=\"card-full\"\n             :scorll='false'>\n    <div class=\"dd-title\">Historical Alarms</div>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        date: <el-date-picker v-model=\"time\"\n                        class=\"input\"\n                        range-separator=\"-\"\n                        start-placeholder=\"start\"\n                        end-placeholder=\"end\"\n                        type=\"datetimerange\">\n        </el-date-picker>\n      </el-col>\n      <el-col :span=\"4\">\n        srch: <el-select v-model=\"srch\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in srchList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :span=\"4\">\n        sett: <el-select v-model=\"sett\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in settList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :span=\"4\">\n        cate: <el-select v-model=\"cate\"\n                   class=\"input\"\n                   clearable>\n          <el-option v-for=\"item in cateList\"\n                     :key=\"item\"\n                     :label=\"item\"\n                     :value=\"item\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-row>\n    <el-row :gutter=\"20\"\n            class=\"dd-mt\">\n      <el-col :span='6'>\n        patn: <el-input v-model=\"patn\"\n                  class=\"input\"></el-input>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-button class=\"btn\"\n                   @click='handleSubmit(\"\")'>submit</el-button>\n      </el-col>\n    </el-row>\n    <el-table :data='data'\n              border\n              :height='tableHeight'\n              style=\"width: 100%;margin-top:20px;\">\n      <el-table-column min-width=\"30\"\n                       prop=\"anum\"\n                       label=\"Index\" />\n      <el-table-column min-width=\"130\"\n                       label=\"Time\">\n        <template slot-scope=\"scope\">\n          {{format(scope.row.tstp||'')}}\n        </template>\n      </el-table-column>\n      <el-table-column min-width=\"60\"\n                       prop=\"cate\"\n                       label=\"Categ\" />\n      <el-table-column prop=\"stat\"\n                       label=\"State\"\n                       min-width=\"50\" />\n      <el-table-column prop=\"uack\"\n                       min-width=\"50\"\n                       label=\"Uack\">\n      </el-table-column>\n      <el-table-column prop=\"comt\"\n                       min-width=\"400\"\n                       label=\"Alarm message\" />\n    </el-table>\n  </Container>\n</template>\n\n<script>\nimport Mixins from '@/mixins'\nimport moment from 'moment'\nexport default {\n  mixins: [Mixins],\n  data () {\n    return {\n      data: [],\n      params: {},\n      time: [moment().subtract(1, 'hours'), moment()],\n      srch: '',\n      srchList: ['FromFirst', 'FromLast', 'UseID', 'Blank'],\n      sett: '',\n      settList: ['Today', 'Yesterday', 'ThisWeek', 'LastWeek', 'ThisMonth', 'LastMonth'],\n      cate: '',\n      cateList: ['critical', 'alarm', 'warning', 'event', 'view'],\n      patn: ''\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      if (tokn === '') this.data = []\n      let [start, end] = this.time\n      const { srch, sett, cate, patn } = this\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 81,\n        srch,\n        sett,\n        'ofst': 0,\n        'tokn': tokn,\n        cate,\n        patn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 81) {\n        if (data.rows) {\n          data.rows.forEach(i => this.data.push(i))\n        }\n        if (data.tokn) {\n          if (data.tokn === '-1') {\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    format (time) {\n      return moment(time * 1000).format('YYYY-MM-DD HH:mm:ss')\n    }\n  },\n  computed: {\n    tableHeight () {\n      return window.innerHeight - 60 - 50 - 40 - 50 - 120\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n.input {\n  width: calc(100% - 46px);\n}\n</style>\n"],"sourceRoot":"src/pages/menus/Status"}]}