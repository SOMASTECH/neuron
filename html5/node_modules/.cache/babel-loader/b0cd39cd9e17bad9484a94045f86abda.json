{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/neuron/build/html5/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/neuron/build/html5/src/pages/menus/Status/components/HistoryChartDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/neuron/build/html5/src/pages/menus/Status/components/HistoryChartDialog.vue","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/vue-loader/lib/index.js","mtime":1578022550923}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"/home/neuron/build/html5/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport charts from 'echarts';\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      params: {},\n      time: [new Date(), new Date()],\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    };\n  },\n  computed: {\n    chartStyle: function chartStyle() {\n      return {\n        width: '900px',\n        height: '700px'\n      };\n    },\n    status: function status() {\n      var _this = this;\n\n      return this.$store.state.Status.alarmList.find(function (i) {\n        return i.objn === _this.objName;\n      });\n    }\n  },\n  methods: {\n    handleSubmit: function handleSubmit(tokn) {\n      var _this$time = _slicedToArray(this.time, 2),\n          start = _this$time[0],\n          end = _this$time[1];\n\n      start = moment(start);\n      end = moment(end);\n      this.params = {\n        'func': 82,\n        'srcn': this.objName,\n        'attn': this.propName || '',\n        'fend': 0,\n        'tokn': tokn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      };\n      this.$ws().set({\n        success: this.setData\n      }).send(this.params);\n    },\n    setData: function setData(data) {\n      var _this2 = this;\n\n      if (data.func === 82) {\n        data.tele && data.tele.forEach(function (i) {\n          var dataList = _this2.option.series;\n          var timeList = _this2.option.xAxis.data;\n          dataList.forEach(function (j) {\n            return j.data.push(i[j.name]);\n          });\n          timeList.push(moment(i.tstp * 1000).format('YYYY-MM-DD HH:mm:ss'));\n        });\n\n        if (data.tokn) {\n          if (data.tokn === -1) {\n            this.chartInstance.setOption(this.option);\n            this.$ws().remove(this.setData);\n          } else {\n            this.handleSubmit(data.tokn);\n          }\n        }\n      }\n    },\n    initChart: function initChart() {\n      var _this3 = this;\n\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer);\n      }\n\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          name: this.propName\n        });\n      } else {\n        this.props.filter(function (i) {\n          return i.check;\n        }).map(function (i) {\n          return i.prop;\n        }).forEach(function (i) {\n          if (i !== 'tstp' && i !== 'objn') {\n            _this3.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            });\n          }\n        });\n      }\n\n      this.chartInstance.setOption(this.option);\n    },\n    handleClose: function handleClose() {\n      this.option.series = [];\n      this.option.xAxis.data = [];\n      this.propName = null;\n      this.params = {};\n      this.chartInstance.clear();\n    },\n    handleShow: function handleShow(row, type) {\n      this.time = [moment().subtract(1, 'hours'), moment()];\n      this.propName = row ? row.prop : null;\n      this.dialogVisible = true;\n      this.$nextTick(this.initChart);\n    }\n  }\n};",{"version":3,"sources":["HistoryChartDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-dialog :title='propName||objName'\n             :visible.sync=\"dialogVisible\"\n             width=\"900px\"\n             @closed=\"handleClose\">\n    <div class=\"select\">\n      <el-date-picker v-model=\"time\"\n                      range-separator=\"-\"\n                      start-placeholder=\"start\"\n                      end-placeholder=\"end\"\n                      type=\"datetimerange\">\n      </el-date-picker>\n      &nbsp;&nbsp;&nbsp;&nbsp;\n      <el-button @click=\"handleSubmit(-1)\">submit</el-button>\n    </div>\n    <div :style=\"chartStyle\"\n         ref=\"chartContainer\"></div>\n  </el-dialog>\n</template>\n\n<script>\nimport moment from 'moment'\nimport charts from 'echarts'\nexport default {\n  props: {\n    objName: {\n      type: String,\n      default: ''\n    },\n    props: {\n      type: Array\n    }\n  },\n  data () {\n    return {\n      dialogVisible: false,\n      chartInstance: null,\n      propName: null,\n      params: {},\n      time: [new Date(), new Date()],\n      option: {\n        grid: {\n          top: '20px'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: []\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: []\n      }\n    }\n  },\n  computed: {\n    chartStyle () {\n      return {\n        width: '900px',\n        height: '700px'\n      }\n    },\n    status () {\n      return this.$store.state.Status.alarmList.find(i => i.objn === this.objName)\n    }\n  },\n  methods: {\n    handleSubmit (tokn) {\n      let [start, end] = this.time\n      start = moment(start)\n      end = moment(end)\n      this.params = {\n        'func': 82,\n        'srcn': this.objName,\n        'attn': this.propName || '',\n        'fend': 0,\n        'tokn': tokn,\n        'fryr': start.year(),\n        'frmo': start.month() + 1,\n        'frda': start.date(),\n        'frhr': start.hour(),\n        'frmi': start.minute(),\n        'toyr': end.year(),\n        'tomo': end.month() + 1,\n        'toda': end.date(),\n        'tohr': end.hour(),\n        'tomi': end.minute()\n      }\n      this.$ws().set({ success: this.setData }).send(this.params)\n    },\n    setData (data) {\n      if (data.func === 82) {\n        data.tele && data.tele.forEach(i => {\n          const dataList = this.option.series\n          const timeList = this.option.xAxis.data\n          dataList.forEach(j => j.data.push(i[j.name]))\n          timeList.push(moment(i.tstp * 1000).format('YYYY-MM-DD HH:mm:ss'))\n        })\n        if (data.tokn) {\n          if (data.tokn === -1) {\n            this.chartInstance.setOption(this.option)\n            this.$ws().remove(this.setData)\n          } else {\n            this.handleSubmit(data.tokn)\n          }\n        }\n      }\n    },\n    initChart () {\n      if (!this.chartInstance) {\n        this.chartInstance = charts.init(this.$refs.chartContainer)\n      }\n      if (this.propName) {\n        this.option.series.push({\n          data: [],\n          type: 'line',\n          name: this.propName\n        })\n      } else {\n        this.props.filter(i => i.check).map(i => i.prop).forEach(i => {\n          if (i !== 'tstp' && i !== 'objn') {\n            this.option.series.push({\n              data: [],\n              type: 'line',\n              name: i\n            })\n          }\n        })\n      }\n      this.chartInstance.setOption(this.option)\n    },\n    handleClose () {\n      this.option.series = []\n      this.option.xAxis.data = []\n      this.propName = null\n      this.params = {}\n      this.chartInstance.clear()\n    },\n    handleShow (row, type) {\n      this.time = [moment().subtract(1, 'hours'), moment()]\n      this.propName = row ? row.prop : null\n      this.dialogVisible = true\n      this.$nextTick(this.initChart)\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\n/deep/.el-dialog__body {\n  padding: 0;\n}\n.select {\n  padding: 20px;\n}\n</style>\n"],"sourceRoot":"src/pages/menus/Status/components"}]}