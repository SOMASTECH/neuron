{"remainingRequest":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js!/home/neuron/build/html5/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/neuron/build/html5/src/utils/sleep.js","dependencies":[{"path":"/home/neuron/build/html5/src/utils/sleep.js","mtime":1586417712650},{"path":"/home/neuron/build/html5/node_modules/cache-loader/dist/cjs.js","mtime":1578022549920},{"path":"/home/neuron/build/html5/node_modules/babel-loader/lib/index.js","mtime":1578022512688},{"path":"/home/neuron/build/html5/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1578022543487}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/neuron/build/html5/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport var sleep =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var time,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            time = _args.length > 0 && _args[0] !== undefined ? _args[0] : 0;\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                return resolve();\n              }, time);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sleep() {\n    return _ref.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/home/neuron/build/html5/src/utils/sleep.js"],"names":["sleep","time","Promise","resolve","reject","setTimeout"],"mappings":";;AAAA,OAAO,IAAMA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,IAAP,2DAAc,CAAd;AAAA,6CACZ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,cAAAA,UAAU,CAAC,YAAM;AACf,uBAAOF,OAAO,EAAd;AACD,eAFS,EAEPF,IAFO,CAAV;AAGD,aAJM,CADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALD,KAAK;AAAA;AAAA;AAAA,GAAX","sourcesContent":["export const sleep = async (time = 0) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve()\n    }, time)\n  })\n}\n"]}]}